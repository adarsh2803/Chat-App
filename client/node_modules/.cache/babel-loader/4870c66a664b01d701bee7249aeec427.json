{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adars\\\\Videos\\\\Apps\\\\React-App\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.js\";\n//We are going to use Hooks . live cycle methods which is inside Hooks , this is client side\n//This is our front end & we are going to add emiiters &listners for client side\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport TextContainer from '../TextContainer/TextContainer';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport './Chat.css';\nlet socket; //With hooks u can use as many useState as many u want\n\nconst Chat = ({\n  location\n}) => {\n  //2nd parameter is a setter Function , to set values\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000'; //Gives multiple output results , so for only 1 output , return o/p\n  // only when there are any changes\n\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room); //We have emmiter for Join , We will also make for message and sendMessage\n\n    socket.emit('join', {\n      name,\n      room\n    }, () => {});\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]); //Function for sending Messages\n  //We are writing every Function for index.js\n  //What ever data index.js(server) is sending ,\n  //we should have a corresponding function for some Response\n\n  const sendMessage = event => {\n    //If some Button is clicked , Page is refreshed , we should Prevent that\n    event.preventDefault(); //If message is send , Input is set to empty\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(TextContainer, {\n    users: users,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 8\n    }\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/adars/Videos/Apps/React-App/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","TextContainer","InfoBar","Input","Messages","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log","users"],"mappings":"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","sourcesContent":["//We are going to use Hooks . live cycle methods which is inside Hooks , this is client side\r\n//This is our front end & we are going to add emiiters &listners for client side\r\nimport React ,{ useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\n\r\nimport TextContainer from '../TextContainer/TextContainer';\r\nimport InfoBar from '../InfoBar/InfoBar';\r\nimport Input from '../Input/Input';\r\nimport Messages from '../Messages/Messages';\r\n\r\nimport './Chat.css';\r\nlet socket;\r\n\r\n//With hooks u can use as many useState as many u want\r\nconst Chat = ({location}) => {\r\n  //2nd parameter is a setter Function , to set values\r\n  const [name , setName]= useState('');\r\n  const [room , setRoom]= useState('');\r\n  const [message , setMessage] = useState('');\r\n  const [messages , setMessages] = useState([]);\r\n  const ENDPOINT = 'localhost:5000';\r\n\r\n  //Gives multiple output results , so for only 1 output , return o/p\r\n  // only when there are any changes\r\n  useEffect(()=>{\r\n    const {name,room}=queryString.parse(location.search);\r\n    socket= io(ENDPOINT);\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    //We have emmiter for Join , We will also make for message and sendMessage\r\n    socket.emit('join' , {name,room}, ()=>{\r\n\r\n    });\r\n\r\n    return()=>{\r\n      socket.emit('disconnect');\r\n      socket.off();\r\n    }\r\n\r\n  } ,[ENDPOINT,location.search]);\r\n\r\n  useEffect( ()=>{\r\n    socket.on('message', (message)=>{\r\n      setMessages([...messages,message]);\r\n    });\r\n  } , [messages]);\r\n\r\n    //Function for sending Messages\r\n  //We are writing every Function for index.js\r\n  //What ever data index.js(server) is sending ,\r\n  //we should have a corresponding function for some Response\r\n  const sendMessage = (event) =>{\r\n      //If some Button is clicked , Page is refreshed , we should Prevent that\r\n      event.preventDefault();\r\n\r\n      //If message is send , Input is set to empty\r\n      if(message){\r\n        socket.emit('sendMessage' , message ,()=> setMessage(''));\r\n      }\r\n  }\r\n\r\n  console.log(message,messages);\r\n\r\n  return(\r\n    <div className=\"outerContainer\">\r\n       <div className=\"container\">\r\n         <InfoBar room={room} />\r\n         <Messages messages={messages} name={name}/>\r\n         <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n       </div>\r\n       <TextContainer users={users}/>\r\n    </div>\r\n\r\n  ) ;\r\n\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}