{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\adars\\\\Videos\\\\Apps\\\\React-App\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\adars\\\\Videos\\\\Apps\\\\React-App\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";//We are going to use Hooks . live cycle methods which is inside Hooks , this is client side\n//This is our front end & we are going to add emiiters &listners for client side\nimport React,{useState,useEffect}from'react';import queryString from'query-string';import io from'socket.io-client';import TextContainer from'../TextContainer/TextContainer';import InfoBar from'../InfoBar/InfoBar';import Input from'../Input/Input';import Messages from'../Messages/Messages';import'./Chat.css';var socket;//With hooks u can use as many useState as many u want\nvar Chat=function Chat(_ref){var location=_ref.location;//2nd parameter is a setter Function , to set values\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),room=_useState4[0],setRoom=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),users=_useState6[0],setUsers=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),message=_useState8[0],setMessage=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),messages=_useState10[0],setMessages=_useState10[1];var ENDPOINT='https://chat-app17.herokuapp.com/';//Gives multiple output results , so for only 1 output , return o/p\n// only when there are any changes\nuseEffect(function(){var _queryString$parse=queryString.parse(location.search),name=_queryString$parse.name,room=_queryString$parse.room;socket=io(ENDPOINT);setName(name);setRoom(room);//We have emmiter for Join , We will also make for message and sendMessage\nsocket.emit('join',{name:name,room:room},function(error){if(error){alert(error);}});},[ENDPOINT,location.search]);useEffect(function(){socket.on('message',function(message){setMessages(function(messages){return[].concat(_toConsumableArray(messages),[message]);});});socket.on(\"roomData\",function(_ref2){var users=_ref2.users;setUsers(users);});},[]);//Function for sending Messages\n//We are writing every Function for index.js\n//What ever data index.js(server) is sending ,\n//we should have a corresponding function for some Response\nvar sendMessage=function sendMessage(event){//If some Button is clicked , Page is refreshed , we should Prevent that\nevent.preventDefault();//If message is send , Input is set to empty\nif(message){socket.emit('sendMessage',message,function(){return setMessage('');});}};return/*#__PURE__*/React.createElement(\"div\",{className:\"outerContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(InfoBar,{room:room}),/*#__PURE__*/React.createElement(Messages,{messages:messages,name:name}),/*#__PURE__*/React.createElement(Input,{message:message,setMessage:setMessage,sendMessage:sendMessage})),/*#__PURE__*/React.createElement(TextContainer,{users:users}));};export default Chat;","map":{"version":3,"sources":["C:/Users/adars/Videos/Apps/React-App/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","TextContainer","InfoBar","Input","Messages","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","error","alert","on","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["//We are going to use Hooks . live cycle methods which is inside Hooks , this is client side\r\n//This is our front end & we are going to add emiiters &listners for client side\r\nimport React ,{ useState, useEffect } from 'react';\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\n\r\nimport TextContainer from '../TextContainer/TextContainer';\r\nimport InfoBar from '../InfoBar/InfoBar';\r\nimport Input from '../Input/Input';\r\nimport Messages from '../Messages/Messages';\r\n\r\nimport './Chat.css';\r\nlet socket;\r\n\r\n//With hooks u can use as many useState as many u want\r\nconst Chat = ({location}) => {\r\n  //2nd parameter is a setter Function , to set values\r\n  const [name , setName]= useState('');\r\n  const [room , setRoom]= useState('');\r\n  const [users, setUsers] = useState('');\r\n  const [message , setMessage] = useState('');\r\n  const [messages , setMessages] = useState([]);\r\n  const ENDPOINT = 'https://chat-app17.herokuapp.com/';\r\n\r\n  //Gives multiple output results , so for only 1 output , return o/p\r\n  // only when there are any changes\r\n  useEffect(()=>{\r\n    const {name,room}=queryString.parse(location.search);\r\n    socket= io(ENDPOINT);\r\n    setName(name);\r\n    setRoom(room);\r\n\r\n    //We have emmiter for Join , We will also make for message and sendMessage\r\n    socket.emit('join', { name, room }, (error) => {\r\n      if(error) {\r\n        alert(error);\r\n      }\r\n    });\r\n\r\n  } ,[ENDPOINT,location.search]);\r\n\r\nuseEffect(() => {\r\n    socket.on('message', message => {\r\n      setMessages(messages => [ ...messages, message ]);\r\n    });\r\n\r\n    socket.on(\"roomData\", ({ users }) => {\r\n      setUsers(users);\r\n    });\r\n}, []);\r\n\r\n    //Function for sending Messages\r\n  //We are writing every Function for index.js\r\n  //What ever data index.js(server) is sending ,\r\n  //we should have a corresponding function for some Response\r\n  const sendMessage = (event) =>{\r\n      //If some Button is clicked , Page is refreshed , we should Prevent that\r\n      event.preventDefault();\r\n\r\n      //If message is send , Input is set to empty\r\n      if(message){\r\n        socket.emit('sendMessage' , message ,()=> setMessage(''));\r\n      }\r\n  }\r\n\r\n  return(\r\n    <div className=\"outerContainer\">\r\n       <div className=\"container\">\r\n         <InfoBar room={room} />\r\n         <Messages messages={messages} name={name}/>\r\n         <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n       </div>\r\n       <TextContainer users={users}/>\r\n    </div>\r\n\r\n  ) ;\r\n\r\n}\r\n\r\nexport default Chat;\r\n"]},"metadata":{},"sourceType":"module"}